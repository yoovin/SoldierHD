{"version":3,"sources":["components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Main","state","allTimeLeft","allTimePer","msToTime","s","secs","mins","days","Math","floor","day","hour","minute","second","printLeftTime","thisTime","Date","thisSecond","parse","soldierStart","soldierEnd","soldierStartSecond","soldierEndSecond","leftTime","ilgyeongStart","ilgyeongLeftSecond","sanggyeongStart","sanggyeongLeftSecond","sugyeongStart","sugyeongLeftSecond","allPer","setState","toFixed","ilgyeongLeft","sanggyeongLeft","sugyeongLeft","setTimeout","this","ilgyeong","sanggyeong","sugyeong","className","style","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5030f2c5.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class Main extends Component {\n\n    state = {\n        allTimeLeft:0,\n        allTimePer:0,\n\n    }\n\n    msToTime = (s) =>{\n        let ms = s % 1000;\n        s = (s - ms) / 1000;\n        let secs = s % 60;\n        s = (s - secs) / 60;\n        let mins = s % 60;\n        let days = Math.floor((s - mins) / 1440)\n        let hrs = ((s - mins)/60) - (days * 24);\n\n        let time = {\n            day:days,\n            hour:hrs,\n            minute:mins,\n            second:secs\n        }\n        \n        return time\n    }\n\n    printLeftTime = () => {\n\n        // Time now\n        const thisTime = new Date()\n        const thisSecond = Date.parse(thisTime)\n\n        // Time for soldier\n        const soldierStart = new Date(2019, 4, 13, 14)\n        const soldierEnd = new Date(2020, 11, 12, 8)\n        const soldierStartSecond = Date.parse(soldierStart)\n        const soldierEndSecond = Date.parse(soldierEnd)\n        let leftTime = soldierEndSecond - thisSecond\n\n        // Time for ilgyeong\n        const ilgyeongStart = new Date(2019, 8, 1)\n        const ilgyeongStartSecond = Date.parse(ilgyeongStart)\n        let ilgyeongLeftSecond = ilgyeongStartSecond - thisSecond\n\n        // Time for sanggyeong\n        const sanggyeongStart = new Date(2020, 2, 1)\n        const sanggyeongStartSecond = Date.parse(sanggyeongStart)\n        let sanggyeongLeftSecond = sanggyeongStartSecond - thisSecond\n\n        // Time for sugyeong\n        const sugyeongStart = new Date(2020, 8, 1)\n        const sugyeongStartSecond = Date.parse(sugyeongStart)\n        let sugyeongLeftSecond = sugyeongStartSecond - thisSecond\n\n        // Percent\n        let allPer = ((thisSecond - soldierStartSecond) / (soldierEndSecond - soldierStartSecond)) * 100\n        // let ilPer = ((thisSecond - ilgyeongStartSecond) / (sanggyeongStartSecond - soldierStartSecond)) * 100\n        // let sangPer = ((thisSecond - sanggyeongStartSecond) / (sugyeongStartSecond - sanggyeongStartSecond)) * 100\n        // let suPer = ((thisSecond - sugyeongStartSecond) / (sanggyeongStartSecond - soldierStartSecond)) * 100\n\n        this.setState({\n            allTimeLeft:leftTime,\n            allTimePer:allPer.toFixed(6),\n            ilgyeongLeft: ilgyeongLeftSecond,\n            sanggyeongLeft: sanggyeongLeftSecond,\n            sugyeongLeft: sugyeongLeftSecond,\n            // ilPer:ilPer.toFixed(6),\n            // sangPer:sangPer.toFixed(6),\n            // suPer:suPer.toFixed(6),\n        })\n\n        setTimeout(this.printLeftTime, 1000)\n    }\n\n    componentDidMount(){\n        this.printLeftTime()\n    }\n\n    render() {\n        let {\n            allTimeLeft,\n            allTimePer, \n            ilgyeongLeft, \n            sanggyeongLeft, \n            sugyeongLeft,\n            // ilPer,\n            // sangPer,\n            // suPer\n            } = this.state\n        let {day, hour, minute, second} = this.msToTime(allTimeLeft)\n        let ilgyeong = this.msToTime(ilgyeongLeft)\n        let sanggyeong = this.msToTime(sanggyeongLeft)\n        let sugyeong = this.msToTime(sugyeongLeft)\n        return (\n            <div>\n                <span className=\"hangleLeftGuide\">현대의 남은 군생활</span><br/>\n                <span className=\"time\">{day}</span>\n                <span className=\"hangleTime\">일</span><br/>\n                <span className=\"time\">{hour}</span>\n                <span className=\"hangleTime\">시간 </span>\n                <span className=\"time\">{minute}</span>\n                <span className=\"hangleTime\">분 </span><br/>\n                <span className=\"time\" style={{\"color\":\"#ffad33\"}}>{second}</span>\n                <span className=\"hangleTime\">초</span><br/>\n                <span className=\"percent\" style={{\"color\":\"#808080\"}}>{allTimePer}</span>\n                <span className=\"hangleTime\">%</span><br/><br/>\n                {/* <span>군생활 스타트 : </span>\n                <span>2020</span><span>년</span>\n                <span>1</span><span>월</span>\n                <span>6</span><span>일</span>\n                <span>14</span><span>시</span> */}\n                <span className=\"solStart\">군생활 시작 : 2019년 5월 13일</span><br/>\n                <span className=\"solStart\">군생활 끝 : 2020년 12월 12일</span>\n                <br/>\n                <div className=\"classIn\">\n                    <span className=\"cUp\">일병 진급</span><br/>\n                    {ilgyeongLeft > 0 \n                    ? <div>\n                    <span className=\"ctime\">{ilgyeong.day}</span>\n                    <span className=\"changleTime\">일 </span>\n                    <span className=\"ctime\">{ilgyeong.hour}</span>\n                    <span className=\"changleTime\">시간 </span>\n                    <span className=\"ctime\">{ilgyeong.minute}</span>\n                    <span className=\"changleTime\">분 </span>\n                    <span className=\"ctime\">{ilgyeong.second}</span>\n                    <span className=\"changleTime\">초</span><br/>\n                    </div>\n                    :<div>\n                        <span className=\"cUp\">2019 / 09 / 01 자로 진급!</span>\n                    </div>}\n                    \n                    {/* <span className=\"cpercent\">{ilPer}</span>\n                    <span className=\"changleTime\">%</span> */}\n                </div><br/>\n                <div className=\"classIn\">\n                    <span className=\"cUp\">상병 진급</span><br/>\n                    {sanggyeongLeft > 0 \n                    ? <div>\n                        <span className=\"ctime\">{sanggyeong.day}</span>\n                        <span className=\"changleTime\">일 </span>\n                        <span className=\"ctime\">{sanggyeong.hour}</span>\n                        <span className=\"changleTime\">시간 </span>\n                        <span className=\"ctime\">{sanggyeong.minute}</span>\n                        <span className=\"changleTime\">분 </span>\n                        <span className=\"ctime\">{sanggyeong.second}</span>\n                        <span className=\"changleTime\">초</span><br/>\n                    </div>\n                     :\n                     <div>\n                         <span className=\"cUp\">2020 / 03 / 01 자로 진급!</span>\n                     </div>\n                     }\n                    {/* <span className=\"cpercent\">{sangPer}</span>\n                    <span className=\"changleTime\">%</span> */}\n                </div><br/>\n                <div className=\"classIn\">\n                    <span className=\"cUp\">병장 진급</span><br/>\n                    {sugyeongLeft > 0 \n                    ? <div>\n                        <span className=\"ctime\">{sugyeong.day}</span>\n                        <span className=\"changleTime\">일 </span>\n                        <span className=\"ctime\">{sugyeong.hour}</span>\n                        <span className=\"changleTime\">시간 </span>\n                        <span className=\"ctime\">{sugyeong.minute}</span>\n                        <span className=\"changleTime\">분 </span>\n                        <span className=\"ctime\">{sugyeong.second}</span>\n                        <span className=\"changleTime\">초</span><br/>\n                    </div>\n                    :\n                    <div>\n                        <span className=\"cUp\">2020 / 09 / 01 자로 진급!</span>\n                    </div>\n                    }\n                    {/* <span className=\"cpercent\">{suPer}</span>\n                    <span className=\"changleTime\">%</span> */}\n                </div>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport './App.css'\nimport Main from './components/Main'\n\nexport default class App extends Component {\n\n  render() {\n    return (\n      <div className=\"out\">\n        <div className=\"in\">\n          <Main/>\n      </div>\n    </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}